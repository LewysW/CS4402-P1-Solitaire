MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 21
# CSE_active_eliminated_expressions = 75
# CSE_active_total_size = 151
**VARIABLES**
DISCRETE piles_00002_00001 #
{3..29}
**CONSTRAINTS**
w-inintervalset(piles_00002_00001, [3,3,12,12,27,27,29,29])
**VARIABLES**
DISCRETE piles_00002_00002 #
{3..29}
**CONSTRAINTS**
w-inintervalset(piles_00002_00002, [3,3,12,12,27,27,29,29])
**VARIABLES**
DISCRETE piles_00002_00003 #
{3..29}
**CONSTRAINTS**
w-inintervalset(piles_00002_00003, [3,3,12,12,27,27,29,29])
**VARIABLES**
DISCRETE piles_00003_00001 #
{3..29}
**CONSTRAINTS**
w-inintervalset(piles_00003_00001, [3,3,12,12,27,27,29,29])
**VARIABLES**
DISCRETE piles_00003_00002 #
{3..29}
**CONSTRAINTS**
w-inintervalset(piles_00003_00002, [3,3,12,12,27,27,29,29])
**VARIABLES**
DISCRETE piles_00004_00001 #
{3..29}
**CONSTRAINTS**
w-inintervalset(piles_00004_00001, [3,3,12,12,27,27,29,29])
**VARIABLES**
DISCRETE aux20 #
{0..1}
DISCRETE aux21 #
{0..1}
DISCRETE aux22 #
{0..1}
DISCRETE aux23 #
{0..1}
DISCRETE aux24 #
{0..1}
DISCRETE aux25 #
{0..1}
DISCRETE aux26 #
{0..1}
DISCRETE aux27 #
{0..1}
DISCRETE aux28 #
{0..1}
DISCRETE aux29 #
{0..1}
DISCRETE aux30 #
{0..1}
DISCRETE aux31 #
{0..1}
BOOL aux32 #Active-CSE: 5 occurrences of this expression or equivalent: (piles_00002_00002 != (piles_00002_00001 + piles_00002_00002 + piles_00002_00003 + -1 + -1 - -1 - -1 - piles_00003_00001 - piles_00003_00002))
BOOL aux33 #Active-CSE: 5 occurrences of this expression or equivalent: (piles_00002_00001 != (piles_00002_00001 + piles_00002_00002 + piles_00002_00003 + -1 + -1 - -1 - -1 - piles_00003_00001 - piles_00003_00002))
BOOL aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00003_00002 != (-1 + -1 + -1 - -1 - -1 - -1 + piles_00003_00001 + piles_00003_00002 - piles_00004_00001))
BOOL aux35 #Active-CSE: 4 occurrences of this expression or equivalent: (piles_00002_00003 != (piles_00002_00001 + piles_00002_00002 + piles_00002_00003 + -1 + -1 - -1 - -1 - piles_00003_00001 - piles_00003_00002))
BOOL aux36 #Active-CSE: 3 occurrences of this expression or equivalent: (piles_00003_00001 != (-1 + -1 + -1 - -1 - -1 - -1 + piles_00003_00001 + piles_00003_00002 - piles_00004_00001))
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (-1 + -1 + -1 - -1 - -1 - -1 + piles_00003_00001 + piles_00003_00002 - piles_00004_00001)
{-14..53}
**CONSTRAINTS**
w-inintervalset(aux37, [-14,-14,-12,-12,-6,-5,-3,-3,1,1,3,3,5,5,10,10,12,12,14,14,18,18,20,21,25,25,27,27,29,29,31,31,36,36,38,38,42,42,44,44,46,46,51,51,53,53])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 3 occurrences of this expression or equivalent: (piles_00002_00001 + piles_00002_00002 + piles_00002_00003 + -1 + -1 - -1 - -1 - piles_00003_00001 - piles_00003_00002)
{-25..64}
**CONSTRAINTS**
w-inintervalset(aux38, [-25,-25,-23,-18,-16,-14,-12,-12,-10,-10,-8,-3,-1,-1,1,1,3,12,14,14,16,16,18,23,25,25,27,27,29,31,33,38,40,40,42,42,44,49,51,51,53,53,55,55,57,57,59,64])
**VARIABLES**
BOOL aux40 #Active-CSE: 6 occurrences of this expression or equivalent: (-59=( - piles_00002_00001 - piles_00002_00002 - piles_00002_00003))
BOOL aux42 #Active-CSE: 6 occurrences of this expression or equivalent: (-42=( - piles_00002_00001 - piles_00002_00002 - piles_00002_00003))
BOOL aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00002_00002 != piles_00003_00001)
BOOL aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00002_00003 != piles_00003_00002)
BOOL aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00003_00002 != piles_00004_00001)
DISCRETE aux46 #Active-CSE: 9 occurrences of this expression or equivalent: ( - piles_00002_00001 - piles_00002_00002 - piles_00002_00003)
{-70..-33}
**CONSTRAINTS**
w-inintervalset(aux46, [-70,-70,-66,-66,-61,-61,-59,-59,-57,-57,-53,-53,-51,-51,-42,-42,-36,-35,-33,-33])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00002_00003%13)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux47, [1,1,3,3,12,12])
**VARIABLES**
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00002_00002%13)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux48, [1,1,3,3,12,12])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00002_00001%13)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,3,3,12,12])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00002_00002/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux50, [0,0,2,2])
**VARIABLES**
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00003_00001%13)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux51, [1,1,3,3,12,12])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (piles_00003_00002%13)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux52, [1,1,3,3,12,12])
**VARIABLES**
DISCRETE aux53 #
{0..2}
**CONSTRAINTS**
w-inintervalset(aux53, [0,0,2,2])
**VARIABLES**
**VARIABLES**
ALIAS cards[4]=[12, 29, 27, 3]
**SEARCH**
PRINT[[piles_00002_00001],[piles_00002_00002],[piles_00002_00003],[piles_00003_00001],[piles_00003_00002],[piles_00004_00001]]
VARORDER STATIC [piles_00002_00001, piles_00002_00002, piles_00002_00003, piles_00003_00001, piles_00003_00002, piles_00004_00001]
**CONSTRAINTS**
div(piles_00003_00002, 13, aux53)
reify(diseq(piles_00002_00002,aux38), aux32)
reify(diseq(piles_00002_00001,aux38), aux33)
reify(diseq(piles_00003_00002,aux37), aux34)
reify(diseq(piles_00002_00003,aux38), aux35)
reify(diseq(piles_00003_00001,aux37), aux36)
reify(w-literal(aux46,-59), aux40)
reify(w-literal(aux46,-42), aux42)
reify(diseq(piles_00002_00002,piles_00003_00001), aux43)
reify(diseq(piles_00002_00003,piles_00003_00002), aux44)
reify(diseq(piles_00003_00002,piles_00004_00001), aux45)
modulo(piles_00002_00003,13,aux47)
modulo(piles_00002_00002,13,aux48)
modulo(piles_00002_00001,13,aux49)
div(piles_00002_00002, 13, aux50)
modulo(piles_00003_00001,13,aux51)
modulo(piles_00003_00002,13,aux52)
reifyimply(diseq(piles_00002_00001,piles_00004_00001), !aux33)
watched-or({gaceq(aux49,aux48),w-literal(aux49,12),w-literal(aux33,1),div(piles_00002_00001, 13, aux50)})
watched-or({w-literal(aux32,1),w-literal(aux44,0)})
watched-or({w-literal(aux47,12),w-literal(aux35,1)})
reifyimply(diseq(piles_00002_00003,29), aux42)
reifyimply(diseq(piles_00002_00002,29), aux42)
reifyimply(diseq(piles_00002_00001,29), aux42)
ineq(!aux34, aux45, 0)
reifyimply(diseq(piles_00002_00003,piles_00003_00001), !aux35)
ineq(!aux35, aux44, 0)
watched-or({diseq(-42,aux46),w-literal(piles_00002_00002,27)})
watched-or({w-literal(aux33,1),w-literal(aux43,0)})
watched-or({diseq(-59,aux46),w-literal(piles_00002_00001,3),w-literal(piles_00002_00001,29)})
watched-or({w-literal(aux36,1),w-literal(aux45,0)})
reifyimply(diseq(12,piles_00004_00001), aux40)
reifyimply(diseq(piles_00003_00001,piles_00004_00001), !aux36)
reifyimply(diseq(piles_00002_00003,piles_00004_00001), !aux35)
ineq(!aux32, aux43, 0)
reifyimply(diseq(piles_00002_00002,piles_00003_00002), !aux32)
reifyimply(diseq(12,piles_00003_00002), aux40)
reifyimply(diseq(12,piles_00003_00001), aux40)
watched-or({w-literal(aux52,12),w-literal(aux34,1)})
reifyimply(diseq(29,piles_00004_00001), aux42)
watched-or({gaceq(aux48,aux47),w-literal(aux32,1),div(piles_00002_00003, 13, aux50)})
reifyimply(diseq(piles_00002_00002,piles_00004_00001), !aux32)
reifyimply(diseq(piles_00002_00001,piles_00003_00001), !aux33)
reifyimply(diseq(piles_00002_00001,piles_00003_00002), !aux33)
reifyimply(diseq(piles_00002_00003,12), aux40)
reifyimply(diseq(piles_00002_00002,12), aux40)
reifyimply(diseq(piles_00002_00001,12), aux40)
reifyimply(diseq(29,piles_00003_00002), aux42)
reifyimply(diseq(29,piles_00003_00001), aux42)
watched-or({gaceq(aux51,aux52),w-literal(aux51,12),w-literal(aux36,1),div(piles_00003_00001, 13, aux53)})
gccweak([piles_00003_00001, piles_00003_00002],[3, 12, 27, 29],[aux20, aux21, aux22, aux23])
gccweak([piles_00002_00001, piles_00002_00002, piles_00002_00003],[3, 12, 27, 29],[aux24, aux25, aux26, aux27])
gccweak([piles_00004_00001],[3, 12, 27, 29],[aux28, aux29, aux30, aux31])
weightedsumleq([1,1,1,-1,-1,-1,1,1,-1],[-1,-1,-1,-1,-1,-1,piles_00003_00001,piles_00003_00002,piles_00004_00001],aux37)
weightedsumgeq([1,1,1,-1,-1,-1,1,1,-1],[-1,-1,-1,-1,-1,-1,piles_00003_00001,piles_00003_00002,piles_00004_00001],aux37)
weightedsumleq([1,1,1,1,1,-1,-1,-1,-1],[piles_00002_00001,piles_00002_00002,piles_00002_00003,-1,-1,-1,-1,piles_00003_00001,piles_00003_00002],aux38)
weightedsumgeq([1,1,1,1,1,-1,-1,-1,-1],[piles_00002_00001,piles_00002_00002,piles_00002_00003,-1,-1,-1,-1,piles_00003_00001,piles_00003_00002],aux38)
weightedsumleq([-1,-1,-1],[piles_00002_00001,piles_00002_00002,piles_00002_00003],aux46)
weightedsumgeq([-1,-1,-1],[piles_00002_00001,piles_00002_00002,piles_00002_00003],aux46)
sumleq([aux20,aux21,aux22,aux23],2)
sumgeq([aux20,aux21,aux22,aux23],2)
sumleq([aux24,aux25,aux26,aux27],3)
sumgeq([aux24,aux25,aux26,aux27],3)
sumleq([aux28,aux29,aux30,aux31],1)
sumgeq([aux28,aux29,aux30,aux31],1)
**EOF**
