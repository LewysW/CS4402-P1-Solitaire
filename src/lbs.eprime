language ESSENCE' 1.0

given cards : matrix indexed by [ int(1..n) ] of int(0..51) where alldifferent(cards)

letting RANGE = int(1..n)
letting SUIT = 13

$Decision variables: Aim to find sequences of piles (rows in matrix) which bring us to a solution
find seqs : matrix indexed by [RANGE, RANGE] of int(-1..51)

such that

$[1]. Cards in first sequence must be the cards from the given list
forAll pile : int(1..n) .
  seqs[1, pile] = cards[pile],


$[2]. Number of empty piles of cards must increase as moves are made
forAll seq : int(2..n) .
  forAll pile : int((n - seq + 2)..n) .
    seqs[seq, pile] = -1,

$[3]. (a) For all sequences except the final one
forAll seq : int(1..n-1) .
$(b) There exists a source pile which is not the first pile
 exists src : int(2..(n - seq + 1)) .
 $(c) And there exists a destination pile which is one or three spaces left of the source
  exists dest : int(src - 3,src - 1) .
    $(d) Where the card on top of the destination pile in the new sequence, equals the card on top of the source pile of the previous sequence
    ((seqs[seq + 1, dest] = seqs[seq, src])
      $And the destination card of the old sequence must either have...
      /\
      $(e)...the same rank as the source card...
      ((seqs[seq, dest] % SUIT = seqs[seq, src] % SUIT)
      \/
      $(f)...or the same suit as the source card
      (seqs[seq, dest] / SUIT = seqs[seq, src] / SUIT)))
      /\
      $(g) And for all other piles
      (forAll pile : int(1..(n - seq + 1)) .
      $(h) If the card's position is greater than the source card then its position changes by -1
        (pile != dest /\ (src < pile) -> (seqs[seq + 1, pile - 1] = seqs[seq, pile]))
        /\
        $(i) And if the card's position is less than the source card then its position is unchanged
        (pile != dest /\ (src > pile) -> (seqs[seq + 1, pile] = seqs[seq, pile])))




