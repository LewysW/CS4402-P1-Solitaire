language ESSENCE' 1.0

given cards : matrix indexed by [ int(1..n) ] of int(0..51) where alldifferent(cards)

letting ROWS = int(1..n)
letting COLUMNS = int(1..n)
letting MOVES = n
letting SUIT = 13

find piles : matrix indexed by [ROWS, COLUMNS] of int(-1..51)

such that

$Cards in first pile must be unique cards from cards list
forAll card : int(1..n) .
  piles[1, card] = cards[card],


$Number of empty piles must increase as moves are made
forAll pile : int(2..n) .
  forAll card : int((n - pile + 2)..n) .
    piles[pile, card] = -1,

forAll pile : int(1..n-1) .
 exists src : int(2..(n - pile + 1)) .
  exists dest : int(src - 3,src - 1) .
    piles[pile + 1, dest] = piles[pile, src] 



